use sample_supplies

db.sales.find().limit(1).pretty();

db.sales.find({"items.tags": "office"});

db.sales.find({"items.tags": "office", "items.quantity": {$gt : 6}})

db.sales.find({"items.tags": { $all : [ "office", "school"] }, 
               "items.quantity": {$gt : 6}})

db.sales.find({"items.tags": ["office", "school"], 
                "items.quantity": {$gt : 6}})

db.sales.find({"items.tags": {$size :  3 }, 
               "items.quantity": {$gt : 2}})

-- Não funciona!

db.sales.find({"items.tags": {$size : {$gt : 3}}, 
               "items.quantity": {$gt : 2}})

-- Para o utlimo item do array
db.sales.find({},{"items.tags": { $slice : -1 }}).pretty()

--Para fatiar em 2 itens

db.sales.find({},{"items.tags": { $slice : 2 }}).pretty()

--Para trazer apenas o primeiro

db.sales.find({},{"items.tags": { $slice : 1 }}).pretty()


-- Incrementando valores no array

use sample_training

db.zips.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": -10 } })


-- Acrescentando dados em array dentro do documento : Aqui iremos acrescentar novo dado de nota extra ao aluno


db.grades.updateOne({ "student_id": 250, "class_id": 339 }, 
                    { "$push": { "scores": { "type": "extra credit", "score": 100 } } 
                    })


-- Verificando os parâmtros de resposta do comando Explain

db.zips.find ({"city" : "BRENT" }).explain()


-- Projeção: Exibindo os campos do documento


db.listingsAndReviews.find({"address.country": "Portugal"},{"name": 1})

db.listingsAndReviews.find({"address.country": "Portugal"},{"name": 1, _id : 0})

db.listingsAndReviews.findOne({"address.country": "Portugal", "reviews.comments" : {$regex : /melhor/i} },
                              {"name": 1, "reviews.comments": 1, _id : 0, "reviews.reviewer_name" : 1})


--- $and e $or


db.companies.find({ $or : [{"category_code" : "social"},
                           {"category_code" : "web"} ] } ).limit(3)

db.companies.find({$and : [ {founded_year:{ $lte: 2006 } },
                            {description : {$regex : /tech/i }  } 
                          ] }).limit(5)

db.companies.find({ $or: [{ $and :  [ 
                                        {founded_year: 2004}, 
                                        { $or : [
                                                    {"category_code" : "social"},
                                                    {"category_code" : "web"} 
                                                ] 
                                        } 
                                    ] }, 
                           { $and : [ {founded_month: 10}, 
                                      { $or : [
                                                {"category_code" : "social"},
                                                {"category_code" : "web"} 
                                              ] 
                                      } 
                                    ] 
                           }      
                        ] 
                    } )
----$expr

use sample_training

--- Contanto todos os registros que tem valores destes campos iguais.

db.trips.find({ "$expr": { "$eq": [ "$end station id", "$start station id"] }})


--- Operações mais complexas aplicando operadores de comparação mais de uma vez e comparando valores de campos

db.trips.find({ "$expr": { "$and": [ { "$gt": [ "$tripduration", 1200 ]},
                         { "$eq": [ "$end station id", "$start station id" ]}
                       ]}})

-- $elementMatch

--- Vejam que só se exibe o campo pesquisado, que pode ser o que se deseja. 

db.grades.find({ "class_id": 431 },
               { "scores": { "$elemMatch": { "score": { "$gt": 85 } } }
             }).pretty()

db.grades.find({ "scores": { "$elemMatch": { "type": "extra credit" } }}, 
               {"class_id":1, "_id": 0, "student_id" : 1}).pretty()

----- Método count()


db.trips.find({ "$expr": { "$eq": [ "$end station id", "$start station id"] }}).count()

db.companies.find({ $or: [{ $and :  [ 
                                        {founded_year: 2004}, 
                                        { $or : [
                                                    {"category_code" : "social"},
                                                    {"category_code" : "web"} 
                                                ] 
                                        } 
                                    ] }, 
                                    { $and : [ {founded_month: 10}, 
                                    { $or : [
                                                {"category_code" : "social"},
                                                {"category_code" : "web"} 
                                            ] 
                                    } 
                                    ] 
                                    }      
                                    ] 
} ).count()


----Aggregate Framework

db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()

db.listingsAndReviews.aggregate([
                                 {$match : {"amenities": "Wifi"}},
                                 {$project:{"price": 1, "address" : 1, "_id":0}}
                                 ]).pretty();

-- Listar com o distinct a lista de países

db.listingsAndReviews.aggregate([ {$project: {"address": 1,"_id" : 0}},
                                  {$group:   { _id : "$address.country",
                                   "count": {"$sum": 1}}
                                  }])
-- Organizando os capos e parametrizando outros recursos

db.companies.aggregate([ { $match: { founded_year : 2004}}, 
                         {$limit : 5}, 
                         {$project : {_id:0, 
                                      name :1 }} ])

db.companies.aggregate( [
                            { $match: { "relationships.person": { $ne: null } } },
                            { $project: { relationships: 1, _id: 0 } },
                            { $unwind: "$relationships" },
                            { $group: {
                                _id: "$relationships.person",
                                count: { $sum: 1 }
                            } },
                            { $sort: { count: -1 } }
                        ]).pretty()                                      

db.companies.aggregate([
                            { $match: { funding_rounds: { $exists: true, $ne: [ ] } } },
                            { $unwind: "$funding_rounds" },
                            { $sort: { "funding_rounds.funded_year": 1,
                                "funding_rounds.funded_month": 1,
                                "funding_rounds.funded_day": 1 } },
                            { $group: {
                                _id: { company: "$name" },
                                first_round: { $first: "$funding_rounds" },
                                last_round: { $last: "$funding_rounds" },
                                num_rounds: { $sum: 1 },
                                total_raised: { $sum: "$funding_rounds.raised_amount" }
                            } },
                            { $project: {
                                _id: 0,
                                company: "$_id.company",
                                first_round: {
                                amount: "$first_round.raised_amount",
                                article: "$first_round.source_url",
                                year: "$first_round.funded_year"
                                },
                                last_round: {
                                amount: "$last_round.raised_amount",
                                article: "$last_round.source_url",
                                year: "$last_round.funded_year"
                                },
                                num_rounds: 1,
                                total_raised: 1,
                            } },
                            { $sort: { total_raised: -1 } }
                      ] ).pretty()

--- Sort and limit com count

use sample_training

-- Ordenando ordem decrescente

db.zips.find().sort({ "pop": 1 }).limit(1)

-- Verificando as populações com 0 e contando

db.zips.find({ "pop": 0 }).count()

-- Ordenando inverso ou seja, as maiores primeiro

db.zips.find().sort({ "pop": -1 }).limit(1)

-- Trazendo os 10 primeiros

db.zips.find().sort({ "pop": -1 }).limit(10)

-- Mais de um parâmetro no order by

db.zips.find().sort({ "pop": 1, "city": -1 })

use sample_training

--Pesquisando

db.trips.find({ "birth year": 1989 })

---Organizando para medir perfomance

db.trips.find({ "start station id": 476 }).sort( { "birth year": 1 } )

--Criando o índice

db.trips.createIndex({ "birth year": 1 })

--Criando um índice para otimizar uma consulta de 2 campos.

db.trips.createIndex({ "start station id": 1, "birth year": 1 })